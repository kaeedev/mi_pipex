// Prototipos de funciones
// parsing.c Valida argumentos y archivos
void	ft_error(int i); //Para mensajes de error y terminar el programa
int		validate_args(int argc, char **argv); //Comprueba si los argumentos son correctos y si es modo here_doc
int		check_files(char *file1, char *file2); //Verifica q el archivo de entrada existe y el de salida se puede crear
char	**parse_command(char *cmd); //Divide comandos con un espacio con el split

// path.c Busca el path de los comandos
char	*get_env_path(char **envp); //Busca la variable PATH en el entorno
char	*create_path(char *dir, char *cmd); //Une un directorio y un comando para formar un path completo
char	*find_command_path(char *cmd, char **envp); //Busca el path absoluto de un comando usando PATH

// utils.c. Simplemente una funcion de free
void	free_pipes(int **pipes, int num_pipes); //Libera la memoria reservada para los pipes

// commands.c. Configura la entrada/salida de cada comando
void	setup_first_command(char **argv, int **pipes); //Configura la entrada/salida del primer comando
void	setup_last_command(char **argv, int argc, int **pipes, int cmd_index); // Configura la entrada/salida del ultimo comando
void	setup_middle_command(int **pipes, int cmd_index); //Configura la entrada/salida de los comandos intermedios
void	execute_command(int cmd_index, int argc, char **argv, char **envp, int **pipes); //Ejecuta el comando correspondiente segun su posicion (primero, intermedios, ultimo...)

// pipes.c. Crea y gestiona los pipes y procesos
int		**allocate_pipes(int num_pipes); //Reserva memoria para los pipes
void	create_all_pipes(int **pipes, int num_pipes); //Crea todos los pipes necesarios
void	close_all_pipes(int **pipes, int num_pipes); //Cierra todos los extremos de los pipes
void	create_all_processes(pid_t *pids, int num_cmds, int argc, char **argv, char **envp, int **pipes); //Hace fork de todos los procesos hijos y ejecuta los comandos
void	wait_all_processes(pid_t *pids, int num_cmds); //Espera a que todos los procesos hijos terminen

//MODO HERE_DOC

// here_doc.c - Gestiona el modo here_doc
void	handle_here_doc_mode(int argc, char **argv, char **envp); //Dirige la ejecucion en modo here_doc
void	create_here_doc_processes(pid_t *pids, int num_cmds, int argc, char **argv, char **envp, int **pipes, int here_doc_pipe[2]); //Hace fork de los procesos necesarios para la pipeline en modo here_doc
void	handle_here_doc(char *limiter, int pipe_fd[2]); //Lee lineas del usuario hasta el limitador y las pasa por un pipe
void	setup_here_doc_first_command(int here_doc_pipe[2], int **pipes); //Configura la entrada del primer comando en modo here_doc
void	execute_here_doc_command(int cmd_index, int argc, char **argv, char **envp, int **pipes, int here_doc_pipe[2]); //Ejecuta uno de los comandos de la pipeline en modo here_doc
void	setup_here_doc_last_command(char **argv, int argc, int **pipes, int cmd_index); //Configura la entrada/salida del ultimo comando en modo here_doc

// here_doc_mode.c - Gestiona el modo here_doc
int		**setup_here_doc_resources(int argc, pid_t **pids, int here_doc_pipe[2]); //Reserva y prepara todos los recursos necesarios para el modo here_doc
pid_t	create_here_doc_input_process(char *limiter, int here_doc_pipe[2]); //Crea un proceso hijo encargado de leer la entrada del usuario hasta el limitador
void	execute_here_doc_pipeline(pid_t *pids, int argc, char **argv, char **envp, int **pipes, int here_doc_pipe[2]); // Crea todos los procesos hijos para ejecutar la pipeline en modo here_doc
void	cleanup_here_doc_resources(int **pipes, pid_t *pids, int here_doc_pipe[2], pid_t here_doc_pid, int argc); //Libera y cierra todos los recursos usados en modo here_doc


		+-------------------+
		|      main()       |
		+-------------------+
					|
					v
		+-------------------+
		| validate_args     |
		+-------------------+
					|
					v
	+-----------------------------+
	| ¿Es here_doc?               |
	+-----------------------------+
    |                              |
   sí                              no
    |                              |
    v                              v
+-------------------+   			+--------------------------+
| handle_here_doc_  |   			|   check_files           |
|    mode           |   			+--------------------------+
+-------------------+   			| allocate_pipes           |
         |              			| create_all_pipes         |
         v              			| create_all_processes     |
+-------------------------------+   | close_all_pipes          |
| setup_here_doc_resources       |  | wait_all_processes       |
| (reserva pipes, pids, pipe)    |  | free_pipes               |
+-------------------------------+   +--------------------------+
         |
         v
+-------------------------------+
| create_here_doc_input_process |  <--- (crea el proceso que lee del usuario)
+-------------------------------+
         |
         v
+-------------------------------+
| execute_here_doc_pipeline     |  <--- (crea todos los procesos hijos)
|  - Para cada comando:         |
|    fork + execute_here_doc_   |
|    command                    |
+-------------------------------+
         |
         v
+-------------------------------+
| cleanup_here_doc_resources    |  <--- (libera memoria, cierra pipes, espera)
+-------------------------------+

Recorrido usando pipex SIN here_doc (modo normal):

- main()
- Llama a validate_args → detecta modo normal.
- Llama a check_files para comprobar que infile.txt y outfile.txt existen/se pueden usar.
- Calcula cuántos comandos y pipes necesita.
- Llama a allocate_pipes y create_all_pipes para reservar y crear los pipes.
- Reserva memoria para los pids.
- Llama a create_all_processes:
    - Por cada comando:
    - Hace fork.
    - En el hijo, llama a execute_command:
       - Si es el primer comando, llama a setup_first_command (redirige STDIN desde infile.txt y STDOUT al primer pipe).
       - Si es el último, llama a setup_last_command (redirige STDIN desde el último pipe y STDOUT a outfile.txt).
       - Si es intermedio, llama a setup_middle_command.
       - Parsea el comando, busca el path, ejecuta con execve.
- El padre cierra todos los pipes (close_all_pipes).
- Espera a que terminen los hijos (wait_all_processes).
- Libera memoria (free_pipes y free de pids).




Recorrido usando pipex CON here_doc:

main()

- Llama a validate_args → detecta modo here_doc.
- Llama a handle_here_doc_mode.

handle_here_doc_mode
- Llama a setup_here_doc_resources:
  - Reserva memoria para pipes y pids.
  - Crea el pipe especial para here_doc.

Llama a create_here_doc_input_process:
- Hace fork.
- El hijo lee líneas del usuario hasta que escribe LIMITER, y las escribe en el pipe de here_doc.
- El padre sigue.

Llama a execute_here_doc_pipeline:
- Por cada comando:
  - Hace fork.
  - En el hijo, llama a execute_here_doc_command:
    - Si es el primer comando, llama a setup_here_doc_first_command (lee del pipe de here_doc y escribe al primer pipe).
    - Si es el último, llama a setup_here_doc_last_command (lee del último pipe y escribe en outfile.txt en modo append).
    - Si es intermedio, llama a setup_middle_command.
    - Parsea el comando, busca el path, ejecuta con execve.

Llama a cleanup_here_doc_resources:
- Cierra y libera todos los recursos.
- Espera a que terminen los procesos hijos y el proceso de here_doc.